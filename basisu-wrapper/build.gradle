apply plugin: 'java-library'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileJava.options.incremental = true
compileJava.options.headerOutputDirectory.set(file('jni'))

sourceSets.main.java.srcDirs += ['src']

sourceSets.test.java.srcDirs += ['test']
sourceSets.test.resources.srcDirs += ['test-resources']

dependencies {
    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.badlogicgames.gdx:gdx-jnigen-loader:$jnigenVersion"
    // Desktop natives should be build and packed as jar for this dependency to work.
    // ./gradlew jnigen jnigenBuild<platform> jnigenJarNativesDesktop
    testRuntimeOnly files("${project.buildDir}/libs/basisu-wrapper-natives-desktop.jar")
}

println file("${project.buildDir}/libs/basisu-wrapper-natives-desktop.jar")

test {
    useJUnit()
    maxHeapSize = '1G'
}

//region jnigen configuration
apply plugin: 'com.badlogicgames.gdx.gdx-jnigen'

jnigen {
    sharedLibName = 'basisu-wrapper'

    nativeCodeGenerator {
        sourceDir = '/src'
    }

    all {
        headerDirs = [
                'include',
                'basis-universal/encoder',
                'basis-universal/transcoder',
                'basis-universal/zstd',
        ]
        cppIncludes = [
                // Basis Universal files.
                'basis-universal/encoder/*.c',
                'basis-universal/encoder/*.cpp',
                'basis-universal/transcoder/basisu_transcoder.cpp',
                'basis-universal/zstd/zstd.c',

                // Local JNI files.
                'basisu_native_utils.cpp',
                'basisu_wrapper.cpp',

                // Auto generated JNI classes.
                'com_crashinvaders_basisu_BasisuWrapper.cpp',
        ]
        cExcludes = cppExcludes = [
                'build/**',
                'basis-universal/zstd/zstddeclib.c',
        ]

        def commonFlags =
                '-fvisibility=hidden -fPIC -fno-strict-aliasing -pthread ' +
                '-D_LARGEFILE64_SOURCE=1 -D_FILE_OFFSET_BITS=64 ' +
                '-Wall -Wextra -Wno-unused-local-typedefs ' +
                '-Wno-unused-value -Wno-unused-parameter -Wno-unused-variable ' +
                '-g0 -Os'

        // Those are the same defines used for WebGL build optimization
        // https://github.com/BinomialLLC/basis_universal/blob/master/webgl/encoder/CMakeLists.txt
        def transcoderDefines =
                '-DBASISD_SUPPORT_UASTC=1 ' +
                '-DBASISD_SUPPORT_BC7=1 ' +
                '-DBASISD_SUPPORT_ATC=0 ' +
                '-DBASISD_SUPPORT_ASTC_HIGHER_OPAQUE_QUALITY=0 ' +
                '-DBASISD_SUPPORT_PVRTC2=0 ' +
                '-DBASISD_SUPPORT_FXT1=0 ' +
                '-DBASISD_SUPPORT_ETC2_EAC_RG11=0 ' +
                '-DBASISU_SUPPORT_ENCODING=1 ' +
                '-DBASISD_SUPPORT_KTX2=1 ' +
                '-DBASISD_SUPPORT_KTX2_ZSTD=0 '

        cFlags +=      " -std=c11   $commonFlags $transcoderDefines "
        cppFlags +=    " -std=c++11 $commonFlags $transcoderDefines "
        linkerFlags += "            $commonFlags "

        // Disable texture formats we don't support at all.
        // Macros reference - https://github.com/BinomialLLC/basis_universal/wiki/Transcoder-details-and-shrinking-the-compiled-size-of-the-transcoder#shrinking-the-transcoders-compiled-size
        cppFlags += ' -DBASISD_SUPPORT_FXT1=0 '

        // Enable for Basis Universal debug messages.
        // cppFlags += ' -DBASISU_FORCE_DEVEL_MESSAGES=1 '
    }
    add(Windows, x64) {
        compilerSuffix = '.exe'

        linkerFlags += ' -s '   // Strip debug symbols.
    }
    add(Linux, x64) {

    }
    add(Linux, x32, ARM) {

    }
    add(Linux, x64, ARM) {

    }
    add(MacOsX, x64) {

    }
    add(MacOsX, x64, ARM) {

    }
}

jnigenJarNativesDesktop {
    archiveVersion = ""
}

tasks.named('jnigen') {
    doLast {
        //FIXME Remove this once "jnigen" task creates "libs" under the respected module (currently it writes to the root project dir).
        if (file("${rootDir}/libs").exists()) {
            println "Applying libs dir fix..."
            ant.move file: "${rootDir}/libs",
                    todir: "${projectDir}"
        }
    }
}

//endregion

// Define all the natives jars so Maven can pickup those and publish.
artifacts {
    archives jnigenJarNativesDesktop
}